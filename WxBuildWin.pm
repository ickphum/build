# generated by wxGlade 0.6.3 on Mon Nov 10 14:07:03 2008
# To get wxPerl visit http://wxPerl.sourceforge.net/

use strict;
package WxBuildWin;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use Time::Piece;
use Log::Log4perl qw(get_logger);

use MovieCaptureDialog;

# begin wxGlade: ::dependencies
use WxBuildViewPanel;
# end wxGlade

my $log = get_logger;

sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: WxBuildWin::new

	$style = wxDEFAULT_FRAME_STYLE 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{window_2} = Wx::SplitterWindow->new($self, -1, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
	$self->{window_2_pane_2} = Wx::Panel->new($self->{window_2}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{window_2_pane_1} = Wx::Panel->new($self->{window_2}, -1, wxDefaultPosition, wxDefaultSize, );
	

	# Menu Bar

	$self->{main_menubar} = Wx::MenuBar->new();
	my $wxglade_tmp_menu;
	$wxglade_tmp_menu = Wx::Menu->new();
	$wxglade_tmp_menu->Append(wxID_OPEN, "Open", "");
	$self->{main_menubar}->Append($wxglade_tmp_menu, "File");
	$wxglade_tmp_menu = Wx::Menu->new();
	$wxglade_tmp_menu->Append(2, "Eye Follows Cursor\tE", "Toggle the eye-follow-cursor behaviour in the perspective view", 1);
	$wxglade_tmp_menu->Append(3, "Light Follows Cursor\tL", "Toggle the light-follow-cursor behaviour in the perspective view", 1);
	$wxglade_tmp_menu->Append(1, "Target Follows Cursor\tT", "Toggle the target-follow-cursor behaviour in the perspective view", 1);
	$wxglade_tmp_menu->AppendSeparator();
	$wxglade_tmp_menu->Append(6, "Capture\tC", "Toggle the image capturing behaviour", 1);
	$self->{main_menubar}->Append($wxglade_tmp_menu, "Perspective");
	$wxglade_tmp_menu = Wx::Menu->new();
	$wxglade_tmp_menu->Append(7, "Reset Eye\tCtrl+E", "Restore the view's eye to its default position");
	$wxglade_tmp_menu->Append(8, "Reset Axes\tCtrl-A", "Restore View to default position and size");
	$wxglade_tmp_menu->Append(9, "Toggle Toolbar\tCtrl-T", "Toggle the view toolbar");
	$self->{main_menubar}->Append($wxglade_tmp_menu, "View");
	$self->SetMenuBar($self->{main_menubar});
	
# Menu Bar end

	$self->{frame_1_statusbar} = $self->CreateStatusBar(5, 0);
	
# Tool Bar
	$self->{frame_1_toolbar} = Wx::ToolBar->new($self, -1, wxDefaultPosition, wxDefaultSize, );
	$self->SetToolBar($self->{frame_1_toolbar});
	$self->{frame_1_toolbar}->AddTool(Wx::NewId(), "item", Wx::Bitmap->new("/usr/share/icons/gnome/24x24/actions/fileopen.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "", "");
	$self->{frame_1_toolbar}->AddTool(Wx::NewId(), "eye", Wx::Bitmap->new("/home/ikm/subversion/ikm/build/images/camera.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_CHECK, "", "");
	# Tool Bar end
	$self->{tree} = Wx::TreeCtrl->new($self->{window_2_pane_1}, -1, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_NO_LINES|wxTR_TWIST_BUTTONS|wxTR_HIDE_ROOT|wxTR_EXTENDED|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
	$self->{XY} = WxBuildViewPanel->new($self->{window_2_pane_2}, -1);
	$self->{YZ} = WxBuildViewPanel->new($self->{window_2_pane_2}, -1);
	$self->{XZ} = WxBuildViewPanel->new($self->{window_2_pane_2}, -1);
	$self->{perspective} = WxBuildViewPanel->new($self->{window_2_pane_2}, -1);

	$self->__set_properties();
	$self->__do_layout();

	Wx::Event::EVT_MENU($self, 2, \&handle_eye_follows_cursor);
	Wx::Event::EVT_MENU($self, 3, \&handle_light_follows_cursor);
	Wx::Event::EVT_MENU($self, 1, \&handle_target_follows_cursor);
	Wx::Event::EVT_MENU($self, 6, \&handle_capture);
	Wx::Event::EVT_MENU($self, 7, \&handle_reset_eye);
	Wx::Event::EVT_MENU($self, 8, \&handle_reset_view);
	Wx::Event::EVT_MENU($self, 9, \&handle_toggle_toolbar);

# end wxGlade
	return $self;

}


sub __set_properties {
	my $self = shift;
	$self->{XY}->SetName('XY');
	$self->{YZ}->SetName('YZ');
	$self->{XZ}->SetName('XZ');
	$self->{perspective}->SetName('perspective');

# begin wxGlade: WxBuildWin::__set_properties

	$self->SetTitle("WxBuild");
	my $icon = Wx::Icon->new();
	$icon->CopyFromBitmap(Wx::Bitmap->new("/home/ikm/subversion/ikm/build/build.png", wxBITMAP_TYPE_ANY));
	$self->SetIcon($icon);
	$self->SetSize(Wx::Size->new(659, 548));
	$self->SetBackgroundColour(Wx::Colour->new(234, 232, 227));
	$self->{frame_1_statusbar}->SetStatusWidths(-1,60,50,50,50);
	
	my( @frame_1_statusbar_fields ) = (
		"",
		"Cursor",
		"0",
		"0",
		"0"
	);

	if( @frame_1_statusbar_fields ) {
		$self->{frame_1_statusbar}->SetStatusText($frame_1_statusbar_fields[$_], $_) 	
		for 0 .. $#frame_1_statusbar_fields ;
	}
	$self->{frame_1_toolbar}->Realize();
	$self->{window_2_pane_2}->SetBackgroundColour(Wx::Colour->new(0, 0, 0));

# end wxGlade
}

sub __do_layout {
	my $self = shift;

# begin wxGlade: WxBuildWin::__do_layout

	$self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{grid_sizer_1} = Wx::GridSizer->new(3, 2, 2, 2);
	$self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sizer_2}->Add($self->{tree}, 1, wxEXPAND, 0);
	$self->{window_2_pane_1}->SetSizer($self->{sizer_2});
	$self->{grid_sizer_1}->Add($self->{XY}, 1, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{YZ}, 1, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{XZ}, 1, wxEXPAND, 0);
	$self->{grid_sizer_1}->Add($self->{perspective}, 1, wxEXPAND, 0);
	$self->{window_2_pane_2}->SetSizer($self->{grid_sizer_1});
	$self->{window_2}->SplitVertically($self->{window_2_pane_1}, $self->{window_2_pane_2}, 200);
	$self->{sizer_1}->Add($self->{window_2}, 1, wxEXPAND, 0);
	$self->SetSizer($self->{sizer_1});
	$self->Layout();

# end wxGlade
}

sub set_status_text {
    my ($self, $field, $string) = @_;

    $self->{frame_1_statusbar}->SetStatusText($string, $field) 	
}

sub handle_eye_follows_cursor {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_eye_follows_cursor <event_handler>

    wxTheApp->{app}->change_cursor_state($event, $WxBuild::CS_EYE);
	$event->Skip;

# end wxGlade
}


sub handle_light_follows_cursor {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_light_follows_cursor <event_handler>

    wxTheApp->{app}->change_cursor_state($event, $WxBuild::CS_LIGHT);
	$event->Skip;

# end wxGlade
}


sub handle_target_follows_cursor {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_target_follows_cursor <event_handler>

    wxTheApp->{app}->change_cursor_state($event, $WxBuild::CS_TARGET);
	$event->Skip;

# end wxGlade
}


sub handle_grow_cursor {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_grow_cursor <event_handler>

    wxTheApp->{app}->cursor_size(wxTheApp->{app}->cursor_size * 2);
	$event->Skip;

# end wxGlade
}


sub handle_shrink_cursor {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_shrink_cursor <event_handler>

    wxTheApp->{app}->cursor_size(wxTheApp->{app}->cursor_size * 0.5);
	$event->Skip;

# end wxGlade
}


sub handle_capture {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_capture <event_handler>

    my $app = wxTheApp->{app};
    if ($event->IsChecked) {
        my $time = localtime;
        $app->capturing($time->strftime("%Y%m%d%H%M%S"));
        $app->capture_index(0);
    }
    else {
        my $capture_start = $app->capturing;
        $app->capturing(0);
        my $filename = "$capture_start.mpg";
        my $command = "ffmpeg -f image2 -i capture/perspective_${capture_start}_%06d.jpg $filename 2>/dev/null 1>/dev/null";
        $log->debug("$command");
        system $command;
        system "mplayer -really-quiet $filename 2>/dev/null";
        my $dialog = MovieCaptureDialog->new();
        $dialog->init("$capture_start.mpg");
        $dialog->ShowModal;
        my ($keep, $remove, $file) = $dialog->values;
        $log->debug("dialog: $keep, $remove, $file");
        if ($keep) {
            if ($file ne $filename) {
                rename $filename, $file;
            }
        }
        else {
            unlink $filename;
        }
        if ($remove) {
            system "rm capture/perspective_${capture_start}_*";
        }
        $dialog->Destroy;

    }
	$event->Skip;

# end wxGlade
}


sub handle_reset_eye {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_reset_eye <event_handler>

    my $app = wxTheApp->{app};
    if ($app->current_view) {
        $app->current_view->reset_eye;
    }
	$event->Skip;

# end wxGlade
}


sub handle_reset_view {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_reset_view <event_handler>

    my $app = wxTheApp->{app};
    if ($app->current_view) {
        $app->current_view->reset_view;
    }
	$event->Skip;

# end wxGlade
}


sub handle_toggle_toolbar {
	my ($self, $event) = @_;
# wxGlade: WxBuildWin::handle_toggle_toolbar <event_handler>

    my $app = wxTheApp->{app};
    if ($app->current_view) {
        $app->current_view->toggle_controls;
    }
	$event->Skip;

# end wxGlade
}

# end of class WxBuildWin

1;

